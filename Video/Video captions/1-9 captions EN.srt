1
00:00:00,000 --> 00:00:07,033
In this video we're returning to binary, to cover a loose end that we haven't discussed. That's the question of how to represent negative 

2
00:00:07,033 --> 00:00:11,899
numbers. All the integers we've worked with so far have been zero or positive. 

3
00:00:11,900 --> 00:00:16,866
Can you even represent a negative number in binary? If so, how? 
 

4
00:00:16,866 --> 00:00:25,466
Let's think how we might approach that problem, with an example. We know that the decimal integer 9 is represented 1001 in binary. 

5
00:00:25,466 --> 00:00:34,032
How might we represent -9? We can't just stick a minus sign onto 1001 because computers won't know what to do with it --- they only 

6
00:00:34,033 --> 00:00:43,233
recognize 0 and 1 and no other symbols. One approach would be to change the way we do binary representation in the first place by 

7
00:00:43,233 --> 00:00:54,166
adding a bit onto the end of every number that holds information about its sign. For example we could take 1001 and make it 01001 if we 

8
00:00:54,166 --> 00:01:04,232
mean positive 9 and 11001 if we mean negative 9. That would certainly distinguish 9 from -9. But first of all it would make -9 

9
00:01:04,233 --> 00:01:12,566
indistinguishable from 25 in binary, and even worse, it would mess up the way we do arithmetic, because if we added these two 

10
00:01:12,566 --> 00:01:18,732
together we should get 0, but instead we get this, which is definitely NOT zero. 

11
00:01:18,733 --> 00:01:25,633
So we'd have to completely redo all the algorithms for arithmetic, which seems like a lot of work. 
 

12
00:01:25,633 --> 00:01:34,599
But it's not a terrible idea to add a bit to a number to indicate its sign. We just need to do it in a way that makes it workable with all the 

13
00:01:34,600 --> 00:01:39,100
arithmetic we've seen. It turns out there are multiple ways to do this in computer science, 

14
00:01:39,100 --> 00:01:43,666
but the most common one is called "two's complement". 
 

15
00:01:43,666 --> 00:01:52,332
Here's the process for how to write a negative integer in binary using two's complement. To begin, we first have to predefine the number of 

16
00:01:52,333 --> 00:02:01,866
bits used to represent any integer. This is built into the hardware choices of computers, for example when you hear of a "64-bit" or "32-bit" 

17
00:02:01,866 --> 00:02:10,332
operating system, it means that the system is designed to handle chunks of data of that size --- 64 bits at a time or 32 bits at a time. 

18
00:02:10,333 --> 00:02:24,333
In an 8-bit system, information would be handled 8 bits at a time, so in that case the number 9 would not be 1001 but 0000 1001. 

19
00:02:24,333 --> 00:02:32,533
The largest number an 8 bit system could handle is 1111 1111 which is 255 in decimal. 
 

20
00:02:32,533 --> 00:02:39,133
Once we know the number of bits used to represent an integer, here's how to represent a negative number using two's complement. 
 

21
00:02:39,133 --> 00:02:53,566
Start with the positive version of that number. For example we saw 9 is 0000 1001. Then first invert or flip all the bits, from 0 to 1 and 1 to 0. 

22
00:02:53,566 --> 00:03:03,766
Then add 1 to this. The result is the two's complement binary representation of the number. 
 

23
00:03:03,766 --> 00:03:24,566
For example we saw +9 is 0000 1001. To represent -9, first flip the bits to 1111 0110. Then add 1 to get 1111 0111. That's -9. 
 

24
00:03:24,566 --> 00:03:34,732
Notice that when we add these two, we do not actually get 0 like you might expect. Instead we get 2^9. But since we are in an 8-bit system, 

25
00:03:34,733 --> 00:03:41,733
this truncates to 0. Thanks to the 8-bit system therefore we end up with 0, as we should. 

26
00:03:41,733 --> 00:03:47,433
This makes two's complement consistent with the rules of addition we already have. 
 

27
00:03:47,433 --> 00:04:03,366
You do the next example first, using the 8-bit integer 199. In binary this is 1100 0110. Follow the steps to write -199 in two's complement 

28
00:04:03,366 --> 00:04:10,332
form. Pause the video and work that out, and again don't worry about mistakes. 
 

29
00:04:10,333 --> 00:04:37,233
So to get -199, first flip the bits on 199 to get 0011 1001. Then add 1: 0011 1010. That's -198. You can check if you want by adding 

30
00:04:37,233 --> 00:04:48,566
these two binaries together, and you'll see that you again get 2^9, which in an 8-bit system is 0, which is what you are supposed to get. 
 

31
00:04:48,566 --> 00:04:56,299
Why is this method is called "two's complement"? Well, the "two" comes from the fact that we are in base 2. THe "complement" 

32
00:04:56,300 --> 00:05:07,600
comes from the bit flipping. As we'll explore in a later module on logic, flipping bits like this is akin to changing from off to on or vice versa, or 

33
00:05:07,600 --> 00:05:17,366
more accurately it's like changing from "true" to "false" or vice versa. The opposite of a truth value is called its "complement" in mathematics 

34
00:05:17,366 --> 00:05:28,999
and that's the first step in the process. And as the examples we saw hint at, when we add a number x to its opposite -x, we'll get 2^(n+1)

35
00:05:29,000 --> 00:05:35,466
if we are in an n-bit system, so the x and -x are "complementary" in that sense. 
 

36
00:05:35,466 --> 00:05:41,132
In this video you learned how to represent negative inegers using two's complement, which is a way of writing negative numbers that 

37
00:05:41,133 --> 00:05:48,499
works with the binary arithmetic we've seen throughout this module. That's the end of this module on integer representation, so 

38
00:05:48,500 --> 00:05:57,066
congratulations! Next we'll explore the world of logic and see how computers use logic to operate. 

