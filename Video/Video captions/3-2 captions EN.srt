1
00:00:00,000 --> 00:00:09,233
In the last video we learned a lot of basic ideas about sets. In this video we're going to look at two different important ways to write sets. 
 

2
00:00:09,233 --> 00:00:17,099
Most the sets we saw in the last video were given like lists. We simply listed the elements of the set, and if there was a pattern we saw that 

3
00:00:17,100 --> 00:00:24,000
helped us express that list then we used dots to represent it. For example, here's the set of all letters in the English alphabet where we 

4
00:00:24,000 --> 00:00:28,833
assume that the pattern here in the dots is understood. But they are all lists. 
 

5
00:00:28,833 --> 00:00:37,133
When we express a set by simply listing its elements inside curly braces, this is called writing the set in **roster notation**. The word 

6
00:00:37,133 --> 00:00:44,433
"roster" in everyday langauge means a list too, usually of people for example the starting eleven of a football team or the members of a 

7
00:00:44,433 --> 00:00:49,333
college class. And that's the meaning we adopt here for sets. 
 

8
00:00:49,333 --> 00:00:57,199
Roster notation is simple but it sometimes can hide information about *why* objects are the elements of a set. For example look at this set. 

9
00:00:57,200 --> 00:01:05,566
There are dots at the end, but what exactly is the pattern here? We'd like this pattern to be more easily understood by someone reading it. 

10
00:01:05,566 --> 00:01:14,166
In fact the pattern is that every element of this set is a natural number that is equal to 1 mod 6. It might be clearer just to *say* that. In other 

11
00:01:14,166 --> 00:01:22,999
words, this is the set of natural numbers that are equal to 1 mod 6. Being explicit about the *membership requirements* here makes it a lot 

12
00:01:23,000 --> 00:01:26,133
easier to understand this set.
 

13
00:01:26,133 --> 00:01:33,499
Here's an alternative way to express this set that makes the membership requirements clear. Here's how to read this: The curly braces 

14
00:01:33,500 --> 00:01:41,933
mean "The set of". Before the colon, we have a variable and we are stating the domain of that variable. So this means "the set of all n in the 

15
00:01:41,933 --> 00:01:54,466
natural numbers". Then the colon means "such that". Then after the colon there is a predicate: n mod 6 is 1. So in all, this notation reads: The 

16
00:01:54,466 --> 00:02:04,732
set of all natural numbers n, such that n mod 6 is 1. And that's an economical way of writing the set we started with, that specifies the 

17
00:02:04,733 --> 00:02:11,233
elements of the set not by listing them but by giving the requirements for membership.
 

18
00:02:11,233 --> 00:02:20,466
This kind of notation is called **set builder notation**. In set builder notation instead of listing the roster of elements, we *build* the set 

19
00:02:20,466 --> 00:02:29,899
by stating the rules for membership. What we're doing here is starting with an initial set, all natural numbers, and then using a predicate to 

20
00:02:29,900 --> 00:02:39,633
filter out all but the elements we want to keep. We first list the variable and its domain, then after the colon we list the predicate that filters 

21
00:02:39,633 --> 00:02:42,399
out elements. 
 

22
00:02:42,400 --> 00:02:52,133
Here's another example of set-builder notation: The set of all real numbers x such that x**2 = 1. What's this set in roster notation? Well, we start 

23
00:02:52,133 --> 00:02:59,199
with the entire set of real numbers, which is a huge set. But then we use this predicate to filter out most of them. We are only going to 

24
00:02:59,200 --> 00:03:12,966
keep the real numbers that make this predicate true. That's just x = 1 and x = -1. So this set in roster notation is the set consisting of 1 and -1. 
 

25
00:03:12,966 --> 00:03:20,866
And here's another example: The set of all x values from the set {0,1,2,...,6} whose square root is bigger than 2. What's this in roster 

26
00:03:20,866 --> 00:03:32,566
notation? Start with all the elements of the set {0,1,2,..., 6}. That's 7 numbers. Now apply the predicate to filter out. The numbers that meet 

27
00:03:32,566 --> 00:03:41,299
the membership requirements, that make the predicate true, are the numbers 5 and 6. So that's our set in roster notation. 
 

28
00:03:41,300 --> 00:03:47,900
In other words, when we write a set in set-builder notation we are expressing it as the truth set of a predicate, namely the predicate 

29
00:03:47,900 --> 00:03:57,033
that comes after the colon. What comes before the colon is the initial set before we apply the filter. Then the predicate does the filtering. 
 

30
00:03:57,033 --> 00:04:06,399
Now you try it. Here's a set in set-builder notation. Just in case you didn't know, a "vowel" in English is one of the letters A, E, I, 

31
00:04:06,400 --> 00:04:13,766
O, or U. Pause the video and write out this set in roster notation.  
 

32
00:04:13,766 --> 00:04:21,799
So, the initial, pre-filtered set we use is the set of letters A through M. Notice that's not the entire alphabet. Then we filter out everything 

33
00:04:21,800 --> 00:04:32,100
except the letters that make the predicate, "x is a vowel", true. That leaves us with A, E, and I. 
 

34
00:04:32,100 --> 00:04:40,933
Try it going the other direction. Here's a set in roster notation. Choose any of the following that would be correct set-builder notation for 

35
00:04:40,933 --> 00:04:44,999
the same set. 
 

36
00:04:45,000 --> 00:04:52,933
So there are two correct answers on this one and here they are. Both of these produce the same list of numbers and both are equally 

37
00:04:52,933 --> 00:05:00,799
correct, although this one is shorter. The other two are not correct and I'll explain why. This one is not correct because the set we start 

38
00:05:00,800 --> 00:05:10,133
with, prior to the filtering, is wrong --- this is the set of ALL integers. If we started with that set and filtered out all but the ones that are 3 mod 

39
00:05:10,133 --> 00:05:20,066
10 we'd pick up not only all the numbers in the roster set but also negative numbers. So that starting set really matters! It has to be stated, 

40
00:05:20,066 --> 00:05:22,732
and stated correctly. 
 

41
00:05:22,733 --> 00:05:31,199
This other one is incorrect because it has the predicate listed first and the set second. This syntax doesn't make sense. If you read it 

42
00:05:31,200 --> 00:05:42,066
aloud, it says "The set of n mod 10 equal 3 such that n is in the natural numbers." This doesn't make sense in English and also not in 

43
00:05:42,066 --> 00:05:52,199
math. Correct set builder notation does not list the filtering predicate first --- it can't, because we have to have a set of numbers to filter first. 

44
00:05:52,200 --> 00:05:57,733
So be mindful of the syntax you use to write in set builder notation. 
 

45
00:05:57,733 --> 00:06:05,833
Finally, here's a variation on set-builder notation that can be handy for programming purposes. Sometimes we can write a set in 

46
00:06:05,833 --> 00:06:15,533
terms not of filters but in terms of computations we perform on elements in a set. For example: this set is also considered to be in set-builder 

47
00:06:15,533 --> 00:06:23,533
notation but it's different. We're not starting with an initial set and filtering things out. Notice the expression before the colon doesn't declare the 

48
00:06:23,533 --> 00:06:33,266
variable and its domain, like we saw a minutes ago. Instead, it specifies a computation to perform, in this case square, and then gives 

49
00:06:33,266 --> 00:06:35,366
the variable and its domain. 
 

50
00:06:35,366 --> 00:06:45,199
What this alternative set-builder notation means, is perform this computation, over all elements of this set. It's still building the set in 

51
00:06:45,200 --> 00:06:52,633
terms of rules for constructing the elements, so that's why it's considered set-builder notation. But instead of starting with a set and filtering 

52
00:06:52,633 --> 00:06:57,399
out, we're starting with a computation and stating where to apply it. 
 

53
00:06:57,400 --> 00:07:05,800
This is basically a FOR loop. It means loop through all the elements in this set after the colon, and perform this process on them. Or in 

54
00:07:05,800 --> 00:07:14,066
another programming metaphor, instead of using a predicate to filter out elements we are using a computation and mapping the 

55
00:07:14,066 --> 00:07:21,899
computation over a set. In this case we are mapping the computation of squaring over the entire set of natural numbers, and that gives us 

56
00:07:21,900 --> 00:07:26,033
this set in roster notation in the end.
 
 

57
00:07:26,033 --> 00:07:33,299
So in this video you learned about roster notation and set builder notation and the differences between the two, and got some 

58
00:07:33,300 --> 00:07:39,666
practice switching the expression of a set from one notation to another. Good job! In the next video we'll get a little more practice with this 

59
00:07:39,666 --> 00:07:45,299
from the standpoint of deciding whether an object belongs to a given set or not. 

